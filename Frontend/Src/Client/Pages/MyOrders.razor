@page "/my-orders"
@using Client.Infrastructure.Services

@attribute [Authorize]

<section class="section my-requests">
    <div class="container">
        
        <AuthorizeView Roles="Guest">
            <Authorized>
                <h1 class="h2 card-title">Мои заказы</h1> 
            </Authorized>
        </AuthorizeView>
        
        <AuthorizeView Roles="Driver">
            <Authorized>
                <h1 class="h2 card-title">Активные заказы</h1> 
            </Authorized>
        </AuthorizeView>
        
        <div class="card-container">
               @foreach (var order in _ordersList) 
               {
                   <div class="card">
                       <div>
                           <h1>Заказчик:</h1>
                       </div>
                       <div class="creator-fullname">
                           <h1>@order.CreatorLastName</h1>
                           <h1>@order.CreatorFirstName</h1>
                           <h1>@order.CreatorMiddleName</h1>
                       </div>
                       <div>
                           <h1>Водитель:</h1>
                       </div>
                       <div class="driver-fullname">
                           @if (string.IsNullOrWhiteSpace(order.DriverFirstName))
                           {
                               <h1>Водитель ещё не найден</h1>

                           }
                           else
                           {
                               <h1>@order.DriverLastName</h1>
                               <h1>@order.DriverFirstName</h1>
                               <h1>@order.DriverMiddleName</h1>
                           }
                       </div>
                       <h1>Тип перевозимого груза: @order.ProductTypeName</h1>
                       <div class="location">
                           <h1> Откуда: @order.From</h1>
                           <h1> Куда: @order.To</h1>
                       </div>
                       <h1>Итоговоая цена: @order.TotalPrice руб</h1>
                       <div class="is-payed">
                           <h1>Статус оплаты:
                               @if (order.IsPayed)
                               {
                                   <span>Оплачено</span>
                               }
                               else
                               {
                                   <span>Ожидается оплата</span>
                               }
                           </h1>
                       </div>
                       <hr/>
                       <div class="created">
                           <h1>Создана: @order.Created.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</h1>
                       </div>
                       <a href="/my-orders/@order.Id" class="btn btn-primary">Детали</a>
                   </div>
               }
        </div>
     

        
        
    </div>
</section>


@code {
    [Inject] CustomAuthenticationStateProvider CustomAuthStateProvider { get; set; } = default!;
    [Inject] IJSRuntime JsRuntime { get; set; } = default!;
    [Inject] ITokenService TokenService { get; set; } = default!;
    [Inject] IOrderManager OrderManager { get; set; } = default!;

    private List<OrderResponse> _ordersList = [];
    private bool _isBusy;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadDataAsync();
    }

    private async Task LoadDataCreatorOrdersAsync(Guid userId)
    {
        var result = await OrderManager.GetAllByCreatorIdAsync(userId);
        if (!result.Succeeded)
        {
            foreach (var message in result.Messages)
                await JsRuntime.InvokeVoidAsync("alert", message);
            return;
        }

        foreach (var order in result.Data)
            _ordersList.Add(order);
    }

    private async Task LoadDataDriverOrdersAsync(Guid userId)
    {
        var result = await OrderManager.GetAllByDriverIdAsync(userId);
        if (!result.Succeeded)
        {
            foreach (var message in result.Messages)
                await JsRuntime.InvokeVoidAsync("alert", message);
            return;
        }

        foreach (var order in result.Data)
            _ordersList.Add(order);
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            _isBusy = true;

            var token = await TokenService.GetAuthTokenAsync();
            var userId = Guid.Parse(TokenService.GetUserIdFromAuthToken(token));
            var role = TokenService.GetRoleFromAuthToken(token);
            switch (role) {
                case "Guest":
                    await LoadDataCreatorOrdersAsync(userId);
                    break;
                case "Driver":
                    await LoadDataDriverOrdersAsync(userId);
                    break;
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
        finally
        {
            _isBusy = false;
        }
    }

}