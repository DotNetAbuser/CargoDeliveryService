// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240520165651_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DriverId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.ProductTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceForDelivery")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceForOneKG")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 67, DateTimeKind.Utc).AddTicks(7692),
                            Name = "Мебель",
                            PriceForDelivery = 300m,
                            PriceForOneKG = 100m
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 67, DateTimeKind.Utc).AddTicks(7808),
                            Name = "Электроника",
                            PriceForDelivery = 600m,
                            PriceForOneKG = 150m
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 67, DateTimeKind.Utc).AddTicks(7811),
                            Name = "Документы",
                            PriceForDelivery = 200m,
                            PriceForOneKG = 200m
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 67, DateTimeKind.Utc).AddTicks(7812),
                            Name = "Предметы личной гигиены",
                            PriceForDelivery = 300m,
                            PriceForOneKG = 100m
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 67, DateTimeKind.Utc).AddTicks(7814),
                            Name = "Драгоценности",
                            PriceForDelivery = 1000m,
                            PriceForOneKG = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 68, DateTimeKind.Utc).AddTicks(1296),
                            Name = "Guest"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 68, DateTimeKind.Utc).AddTicks(1322),
                            Name = "Driver"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 68, DateTimeKind.Utc).AddTicks(1324),
                            Name = "Operator"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 68, DateTimeKind.Utc).AddTicks(1325),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.Entities.TrackingDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("TrackingDetails");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9385ebf5-29cb-4929-91e6-f6b893723f6d"),
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 69, DateTimeKind.Utc).AddTicks(525),
                            Email = "bulatguest@example.com",
                            FirstName = "Булат",
                            LastName = "Гиниятуллин",
                            MiddleName = "Гость",
                            PasswordHash = "$2a$11$N9F8zZ.JECqaeXbDyUzxcu5yKOa5o3E1AKDtnICTUGwroadhlRMwq",
                            PhoneNumber = "+7199992222",
                            RoleId = 1
                        },
                        new
                        {
                            Id = new Guid("a9446867-320b-4a77-be8e-77ccc0721fb7"),
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 217, DateTimeKind.Utc).AddTicks(506),
                            Email = "bulatdriver@example.com",
                            FirstName = "Булат",
                            LastName = "Гиниятуллин",
                            MiddleName = "Водитель",
                            PasswordHash = "$2a$11$Qlal9II98U.09lTj1Z0rKOCkh2dvqxgt1p3s6VrP7eFOO8TStCcpy",
                            PhoneNumber = "+7199992221",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("4eeaeda0-bf8f-4245-9ca7-11cf6854edd0"),
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 366, DateTimeKind.Utc).AddTicks(4713),
                            Email = "bulatoperator@example.com",
                            FirstName = "Булат",
                            LastName = "Гиниятуллин",
                            MiddleName = "Оператор",
                            PasswordHash = "$2a$11$M7WaYRl1x.xUY4Q2nrfp5eIgoieB7S7idlTtaDkQCewVYv.atFRDK",
                            PhoneNumber = "+7199992223",
                            RoleId = 3
                        },
                        new
                        {
                            Id = new Guid("3a64aa09-6f1f-4185-82b3-e0a3b4d85185"),
                            Created = new DateTime(2024, 5, 20, 16, 56, 49, 526, DateTimeKind.Utc).AddTicks(8033),
                            Email = "bulatadmin@example.com",
                            FirstName = "Булат",
                            LastName = "Гиниятуллин",
                            MiddleName = "Админ",
                            PasswordHash = "$2a$11$5RqPuLAsFd1vqxYbT9qE/.eOTS5TNshr/IUvj8fsUP4lTgDBdR3Fa",
                            PhoneNumber = "+7199992224",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "Creator")
                        .WithMany("CreatorOrders")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserEntity", "Driver")
                        .WithMany("DriverOrders")
                        .HasForeignKey("DriverId");

                    b.HasOne("Domain.Entities.ProductTypeEntity", "ProductType")
                        .WithMany("Orders")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Driver");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Domain.Entities.SessionEntity", b =>
                {
                    b.HasOne("Domain.Entities.UserEntity", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TrackingDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.OrderEntity", "Order")
                        .WithMany("TrackingDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.RoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("TrackingDetails");
                });

            modelBuilder.Entity("Domain.Entities.ProductTypeEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("CreatorOrders");

                    b.Navigation("DriverOrders");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
